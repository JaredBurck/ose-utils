#!/bin/bash

SCRIPT_BASE_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )

## Functions
source ${SCRIPT_BASE_DIR}/lib/helpers
source ${SCRIPT_BASE_DIR}/lib/constants

# Show script usage
usage() {
  echo "Usage: $0 -m=|--master=\"<master1 private ip|master1 public ip>\" -n=|--nodes=\"<node1 private ip|node1 public ip>,...,<nodeN private ip|nodeN public ip>\" -a|--actions=\"action1,action2,...actionN\""
}

# Usage: contains "term" "string"
# Returns 0 if term found, 1 otherwise
contains() {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

# Determine whether master is a node, and if not, make node1 the 'infra' node
find_infra_node() {
  contains "master.${OPENSHIFT_BASE_DOMAIN}" ${NODE_HOSTNAMES//,/ }
  if [ $? -eq 0 ]; then
    echo "master.${OPENSHIFT_BASE_DOMAIN}"
  else
    echo "node1.${OPENSHIFT_BASE_DOMAIN}"
  fi
}

# Randomly selects zone
select_zone() {
  # Seed random generator
  RANDOM=$$$(date +%s)

  echo ${openshift_zones[$RANDOM % ${#openshift_zones[@]} ]}
}

process_actions() {
  valid_actions='prep dns install post'
  declare -a requested_actions=(${1//,/ })
  declare -a final_actions

  i=0
  for action in ${valid_actions}; do
    contains "$action" "${requested_actions[@]}"
    [ "$?" == 0 ] && final_actions[$i]="$action" && requested_actions=( ${requested_actions[@]/$action/})
    ((i++))
  done

  [ ! -z ${requested_actions} ] && echo "Unrecognized actions: ${requested_actions[@]}" && exit 1

  for action in ${final_actions[@]}; do
    do_$action
  done
}

setup_ansible() {
  infra_node=$(find_infra_node)
  for node in ${NODE_HOSTNAMES//,/ }; do
    if contains "${infra_node}" "${node}"; then
      region="infra"
      zone="default"
    else
      region="primary"
      zone="$( select_zone )"
    fi

    # The node is a master, then we want to make it unschedulable
    if contains "master" "${node}"; then
      node_opts="openshift_scheduleable=False"
    fi
    # This is a hack to make sure we don't get host key checks during ansible run
    validate_ssh ${node}

    nodestring="$nodestring
${node} openshift_hostname=${node} openshift_public_hostname=${node} openshift_node_labels=\"{'region': '${region}', 'zone': '${zone}'}\" ${node_opts}"
  done

  ansible_hosts_file="# This is an example of a bring your own (byo) host inventory

[OSEv3:children]
masters
nodes
etcd

[OSEv3:vars]
deployment_type=enterprise
ansible_ssh_user=root

# enable htpasswd authentication
openshift_master_identity_providers=[{'name': 'htpasswd_auth', 'login': 'true', 'challenge': 'true', 'kind': 'HTPasswdPasswordIdentityProvider', 'filename': '/etc/openshift/openshift-passwd'}]

# host group for masters
[masters]
${MASTER_HOSTNAME} openshift_hostname=${MASTER_HOSTNAME} openshift_public_hostname=${MASTER_HOSTNAME}

[etcd]
${MASTER_HOSTNAME}

# host group for nodes
[nodes]
$(echo "${nodestring}" | sed '/^\s*$/d')
"

  cd
  rm -rf ~/openshift-ansible
  git clone https://github.com/openshift/openshift-ansible

  echo "$ansible_hosts_file" > /etc/ansible/hosts

  # Disable host key checking so ansible script doesn't stall
  echo "StrictHostKeyChecking=no" >> /root/.ssh/config
}

setup_authentication() {
  users=$OPENSHIFT_USERS

  # Set up authentication
  yum -y install httpd-tools &>/dev/null || error_out "Failed to install httpd-tools"
  touch /etc/openshift/openshift-passwd
  for user in $users; do
    htpasswd -b /etc/openshift/openshift-passwd ${user%:*} ${user#*:}
  done

  systemctl restart openshift-master
}

setup_topology() {
  # Create a custom scheduler topology based on user input
  # TODO
  echo
}

setup_training_repo() {
  cd
  rm -rf ~/training
  git clone https://github.com/openshift/training.git
  cd
}

setup_storage() {
  setup_docker_storage()
  setup_openshift_storage()
}

setup_storage_on_all_hosts() {
  for host in ${MASTER_HOSTNAME} ${NODE_HOSTNAMES//,/ }; do
    ${SSH_CMD} root@${host} "$(typeset -f); setup_storage"
  done
}

# Usage: validate_ssh <hostname>
validate_ssh() {
    ${SSH_CMD} root@${1} exit
    [ $? -eq 0 ] || error_out "Could not establish ssh connection to ${1}" ${ERROR_CODE_SSH_FAILURE}
}

## Action functions
do_prep() {
  echo "Beginning action: Prep"
  yum clean all
  yum_install "" https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm true
  sed -i -e "s/^enabled=1/enabled=0/" /etc/yum.repos.d/epel.repo
  yum -y update &>/dev/null || error_out "Failed to run yum update during Prep phase."
  yum_install --enablerepo=epel ansible true

   for host in $(get_private_ips ${NODES} | sed 's/,/ /g'); do
     ${SSH_CMD} root@${host} "yum clean all; yum update -y"
   done
}

do_dns() {
  echo "Beginning action: DNS"
  command="bash ${SCRIPT_BASE_DIR}/osc-dns-config -m=${MASTER} -n=${NODES} -b=${OPENSHIFT_BASE_DOMAIN} -d=${NODES##*,} -w=${NODES%%,*}"
  $command || error_out "DNS Install & Configuration failed." $ERROR_CODE_DNS_FAILURE
}

do_install() {
  if [ -z $MASTER ] || [ -z $NODES ]; then
    echo "Missing required args"
    usage
    exit 1
  fi

  MASTER_HOSTNAME=$(get_hostnames $(get_private_ips "${MASTER}") "${OPENSHIFT_BASE_DOMAIN}")
  NODE_HOSTNAMES=$(get_hostnames $(get_private_ips "${NODES}") "${OPENSHIFT_BASE_DOMAIN}")

  echo "Install"

  setup_storage_on_all_hosts || error_out "Storage Setup had failures" $ERROR_CODE_STORAGE_FAILURE
  setup_training_repo
  setup_ansible

  # Run ansible
  command="ansible-playbook /root/openshift-ansible/playbooks/byo/config.yml"
  $command || error_out "Ansible install had failures" $ERROR_CODE_ANSIBLE_INSTALL_FAILURE
}

do_post(){
  echo "Post Install"
  setup_authentication

  # Create router infrastructure
  CA=/etc/openshift/master

  oadm ca create-server-cert --signer-cert=$CA/ca.crt \
  --signer-key=$CA/ca.key --signer-serial=$CA/ca.serial.txt \
  --hostnames="*.${OPENSHIFT_BASE_DOMAIN}" \
  --cert=$CA/cloudapps.crt --key=$CA/cloudapps.key


  cat $CA/cloudapps.crt $CA/cloudapps.key $CA/ca.crt > $CA/cloudapps.router.pem

  echo '{"kind":"ServiceAccount","apiVersion":"v1","metadata":{"name":"router"}}' | oc create -f -
  oc get scc privileged -o yaml > priv.yaml
  if [ $(grep -c 'system:serviceaccount:default:router' priv.yaml) -eq 0 ]; then
    echo '- system:serviceaccount:default:router' >> priv.yaml
    oc replace scc privileged -f priv.yaml
  fi

  oadm router router-default --default-cert=$CA/cloudapps.router.pem \
  --credentials=/etc/openshift/master/openshift-router.kubeconfig \
  --selector='region=infra' \
  --images='registry.access.redhat.com/openshift3/ose-${component}:${version}' \
  --service-account=router

  # Create registry
  mkdir -p /mnt/registry

  echo '{"kind":"ServiceAccount","apiVersion":"v1","metadata":{"name":"registry"}}' | oc create -f -
  oc get scc privileged -o yaml > priv.yaml
  if [ $(grep -c 'system:serviceaccount:default:registry' priv.yaml) -eq 0 ]; then
    echo '- system:serviceaccount:default:registry' >> priv.yaml
    oc replace scc privileged -f priv.yaml
  fi

  oadm registry --service-account=registry \
  --config=/etc/openshift/master/admin.kubeconfig \
  --credentials=/etc/openshift/master/openshift-registry.kubeconfig \
  --images='registry.access.redhat.com/openshift3/ose-${component}:${version}' \
  --selector='region=infra' \
  --mount-host=/mnt/registry \

  ### Workarounds for current issues

  # Apply node labels after install (https://bugzilla.redhat.com/show_bug.cgi?id=1235953)
  infra_node=$(find_infra_node)
  for node in ${NODE_HOSTNAMES//,/ }; do
    if contains "${infra_node}" "${node}"; then
      region="infra"
      zone="default"
    else
      region="primary"
      zone="$( select_zone )"
    fi
    oc label node/${node} region=$region zone=$zone
  done
}

# Process input
for i in "$@"
do
  case $i in
    -m=*|--master=*)
      MASTER="${i#*=}"
      shift;;
    -n=*|--nodes=*)
      NODES="${i#*=}"
      shift;;
    -a=*|--actions=*)
      ACTIONS="${i#*=}"
      shift;;
    *)
      echo "Invalid Option: ${i#*=}"
      exit 1;
      ;;
  esac
done

if [ -z $ACTIONS ]; then
  echo "Missing required args"
  usage
  exit 1
fi

source ${SCRIPT_BASE_DIR}/lib/error_codes

# Set up default values
openshift_version=''
openshift_master_config='/etc/openshift/master/master-config.yaml'
ansible_branch=''
openshift_users="joe:redhat alice:redhat"
openshift_base_domain="ose.example.com"
openshift_zones=("east" "west")

# Set up environment based on default values and User input
OPENSHIFT_VERSION=${CONF_OPENSHIFT_VERSION:=$openshift_version}
ANSIBLE_BRANCH=${CONF_ANSIBLE_BRANCH:=$ansible_branch}
OPENSHIFT_USERS=${CONF_OPENSHIFT_USERS:=$openshift_users}
OPENSHIFT_BASE_DOMAIN=${CONF_OPENSHIFT_BASE_DOMAIN:=$openshift_base_domain}
OPENSHIFT_MASTER_CONFIG=$openshift_master_config
OPENSHIFT_ZONES=$openshift_zones

# Begin installation phases
process_actions ${ACTIONS?"Missing argument -a or --action"}

exit 0;
